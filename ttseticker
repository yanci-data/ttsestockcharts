<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>Market Activity Ticker</title>
<style>
  :root{
    --ink:#000; --muted:#667085;
    --up:#118a36; --dn:#b00020; --flat:#1f6feb;
    --gap:24px; --speed-px-per-sec:48; --after-change:14px;

    /* Icon box so ▲/▼ and the unchanged dot line up perfectly */
    --i-w:0.75em;       /* reserved width for the icon */
    --dot-size:0.5em;   /* unchanged blue circle size */
  }

  html,body{margin:0;background:transparent}
  .ticker{
    color:var(--ink);
    font:400 15px/1.35 "SF Pro Display","SF Pro Text",-apple-system,BlinkMacSystemFont,"Segoe UI",Inter,system-ui,sans-serif;
    white-space:nowrap; overflow:hidden;
    -webkit-font-smoothing:antialiased; text-rendering:optimizeLegibility;
  }

  .row{display:flex; align-items:center; gap:16px; min-width:0}
  .label{font-weight:400; letter-spacing:.2px; flex:0 0 auto}
  .date{color:var(--muted); font-weight:200; margin-left:6px}
  .viewport{position:relative; overflow:hidden; flex:1 1 auto; min-width:0}

  .track{ display:inline-flex; gap:var(--gap); will-change:transform; animation:marquee linear infinite; }
  .copy{ display:inline-flex; gap:var(--gap) }

  .item{display:inline-flex; align-items:center; gap:6px}
  .sym{font-weight:400; letter-spacing:.2px}
  .price{font-weight:200; font-variant-numeric:tabular-nums}
  .chg{font-weight:200; font-variant-numeric:tabular-nums; display:inline-flex; align-items:center; gap:6px; line-height:1}
  .chg.up{color:var(--up)} .chg.dn{color:var(--dn)} .chg.flat{color:var(--flat)}

  /* Icon box: ensures ▲/▼ and unchanged dot occupy same space & align */
  .i{
    min-width:var(--i-w);
    display:inline-flex;
    align-items:center;
    justify-content:center;
    height:1em;
    line-height:0; /* fix baseline quirks so dot centers */
  }
  .i.arrow-i{ transform:translateY(-0.02em) } /* tiny optical tweak for text triangles */

  /* Unchanged blue circle (centered in icon box) */
  .dot{
    width:var(--dot-size); height:var(--dot-size);
    border-radius:999px; background:currentColor; display:block;
  }

  /* Dot AFTER the change, with extra space after the change */
  .sep{opacity:.4; margin-left:var(--after-change); margin-right:4px}

  /* Pause on hover */
  .ticker:hover .track{ animation-play-state:paused }

  @keyframes marquee { from{ transform:translateX(0) } to{ transform:translateX(var(--end,-50%)) } }
  @media (prefers-reduced-motion: reduce){ .track{ animation:none } }
</style>
</head>
<body>
  <div class="ticker" id="ttseTicker">
    <div class="row">
      <div class="label" id="label">Market Activity <span class="date" id="asAt"></span></div>
      <div class="viewport" id="vp">
        <div class="track" id="track" aria-live="polite"></div>
      </div>
    </div>
  </div>

<script>
// Configuration constants
const API_BASE = "https://ttse-adaptor.technology-data.workers.dev";
const REFRESH_MS = 60 * 60 * 1000; // Refresh every hour, like the second example

// Track global timer for refreshing data
let refreshTimer = null;

// DOM elements
const labelEl = document.getElementById('label');
const track = document.getElementById('track');
const viewport = document.getElementById('vp');

// Format date as "dd-MMM-yyyy" (e.g., "21-Aug-2025")
function formatDateAsDDMMMYYYY(dateString) {
  if (!dateString) return "";
  
  let date = new Date(dateString);
  if (isNaN(date)) {
    // Try to parse YYYY-MM-DD format
    const match = /^(\d{4})-(\d{2})-(\d{2})$/.exec(dateString);
    if (match) {
      date = new Date(`${match[1]}-${match[2]}-${match[3]}T00:00:00`);
    }
  }
  
  if (isNaN(date)) return dateString;
  
  const day = date.getDate().toString().padStart(2, '0');
  const month = date.toLocaleString('en-US', { month: 'short' });
  const year = date.getFullYear();
  
  return `${day}-${month}-${year}`;
}

// numbers are absolute; direction shown only by ▲/▼
const fmtPct = x => (Number.isFinite(x)?Math.abs(x).toFixed(2):'0.00') + '%';
const band   = x => x >  0.00001 ? 'up' : x < -0.00001 ? 'dn' : 'flat';
const arrow  = x => x >  0.00001 ? '▲' : x < -0.00001 ? '▼' : '';

// Fetch data with cache-busting timestamp
async function fetchData() {
  try {
    // Fetch with cache-busting query param and cache control, just like the second example
    const [activity, indexSeries] = await Promise.all([
      fetch(`${API_BASE}/activity-latest?ts=${Date.now()}`, {credentials:'omit', cache:'no-store'})
        .then(r => r.json()).catch(()=>({})),
      fetch(`${API_BASE}/index-series?limit=2&ts=${Date.now()}`, {credentials:'omit', cache:'no-store'})
        .then(r => r.json()).catch(()=>({}))
    ]);
    
    // Update the display with the new data
    updateDisplay(activity, indexSeries);
  } catch (error) {
    console.error("Error fetching data:", error);
  }
}

function updateDisplay(activity, indexSeries) {
  // Header: "Market Activity [Date]" with dd-MMM-yyyy format
  const formattedDate = formatDateAsDDMMMYYYY(activity?.date);
  labelEl.innerHTML = formattedDate ? `Market Activity <span class="date">${formattedDate}</span>` : "Market Activity";

  // TTSE index first
  let indexItem = null;
  try {
    const pts = (indexSeries?.items || []).slice(-2);
    if (pts.length){
      const last = Number(pts[pts.length-1].v ?? 0);
      const prev = Number(pts[pts.length-2]?.v ?? last);
      const pct  = prev ? ((last - prev)/prev)*100 : 0;
      indexItem  = { symbol:"TTSE", price:last, change_pct:pct };
    }
  } catch(e){
    console.error("Error processing index data:", e);
  }

  // Group: positives → negatives → flats; each A→Z
  const pos=[], neg=[], flat=[];
  (activity?.items || []).forEach(r=>{
    const item = { symbol:r.symbol, price:Number(r.close_price ?? 0), change_pct:Number(r.change_pct ?? 0) };
    if (item.change_pct > 0.00001) pos.push(item);
    else if (item.change_pct < -0.00001) neg.push(item);
    else flat.push(item);
  });
  const bySym=(a,b)=>a.symbol.localeCompare(b.symbol);
  pos.sort(bySym); neg.sort(bySym); flat.sort(bySym);

  const items=[ ...(indexItem?[indexItem]:[]), ...pos, ...neg, ...flat ];

  const html = items.map(it => `
    <span class="item">
      <span class="sym">${it.symbol}</span>
      <span class="price">$${(Number.isFinite(it.price)?it.price:0).toFixed(2)}</span>
      ${changeHTML(it.change_pct)}
      <span class="sep">·</span>
    </span>
  `).join("");

  // Update the track content and recalculate marquee
  setContent(html, true);
  requestAnimationFrame(() => setMarquee());
}

function changeHTML(pct){
  const cls = band(pct);
  if (cls === 'flat'){
    // blue circle instead of any text
    return `<span class="chg flat"><span class="i"><span class="dot" aria-label="No change"></span></span></span>`;
  }
  // triangle + absolute numeric (no +/- in the text)
  return `<span class="chg ${cls}"><span class="i arrow-i">${arrow(pct)}</span><span class="val">${fmtPct(pct)}</span></span>`;
}

function setContent(html, twoCopies=true){
  track.innerHTML = twoCopies
    ? `<span class="copy">${html}</span><span class="copy" aria-hidden="true">${html}</span>`
    : `<span class="copy">${html}</span>`;
}

function setMarquee(){
  const copy = track.querySelector('.copy');
  if (!copy) return;
  const w = copy.getBoundingClientRect().width;
  const vpw = viewport.getBoundingClientRect().width;
  if (w <= vpw) { track.style.animation='none'; setContent(track.querySelector('.copy').innerHTML, false); }
  else {
    const newW = track.querySelector('.copy').getBoundingClientRect().width;
    track.style.setProperty('--end', (-newW)+'px');
    const pxPerSec = parseFloat(getComputedStyle(document.documentElement).getPropertyValue('--speed-px-per-sec')) || 48;
    track.style.animation = `marquee ${ (newW/pxPerSec).toFixed(2) }s linear infinite`;
  }
}

// Initial load and setup refresh timer
(async function(){
  await fetchData();
  
  // Clear any existing timer before setting a new one
  if (refreshTimer) {
    clearInterval(refreshTimer);
  }
  
  // Set up periodic refresh
  refreshTimer = setInterval(fetchData, REFRESH_MS);
  
  // Handle window resize
  new ResizeObserver(setMarquee).observe(viewport);
})();
</script>
</body>
</html>
